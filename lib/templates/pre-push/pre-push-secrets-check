#!/bin/sh

echo "üîí Checking for Secrets in Committed Files..."

# Define common secret patterns (e.g., AWS keys, private tokens)
secret_patterns=(
  "AKIA[0-9A-Z]{16}"           # AWS Access Key ID (e.g., AKIA...)
  "AWS([A-Za-z0-9/+=]{30,})"    # General AWS secrets or keys
  "SECRET_KEY=[A-Za-z0-9/+=]{32,}"  # Generic secret keys
  "PRIVATE_KEY=[A-Za-z0-9/+=]{32,}"  # Generic private keys
  "SG.[A-Za-z0-9]{22}"          # SendGrid API keys
  "^[0-9a-f]{32}$"              # Firebase API keys or other MD5 hashes (potentially non-sensitive)
  "Bearer [A-Za-z0-9._~+/=-]{36,}" # Bearer Tokens (e.g., OAuth)
  "xoxb-[0-9]{12}-[0-9]{12}-[A-Za-z0-9]{24}" # Slack Bot Tokens
  "-----BEGIN (RSA|EC) PRIVATE KEY-----"  # PGP keys
)

# Define non-sensitive hashes (known checksum or public data hashes)
non_sensitive_hashes=(
  "^[0-9a-f]{32}$"  # Example for checksum hashes, like MD5
)

# Log the secret checking process
echo "üõ°Ô∏è Scanning staged files for secrets..."

# Get the list of all staged files
staged_files=$(git diff --cached --name-only)

if [ -z "$staged_files" ]; then
  echo "‚ö†Ô∏è No files staged for commit. Please stage files to run this check."
  exit 1
fi

# Function to check for secrets using custom regex
check_secrets_in_file() {
  local file="$1"
  local line
  while IFS= read -r line; do
    # Check each line for secret patterns
    for pattern in "${secret_patterns[@]}"; do
      if echo "$line" | grep -qE "$pattern"; then
        # Skip known non-sensitive hashes (e.g., checksum)
        for non_sensitive_pattern in "${non_sensitive_hashes[@]}"; do
          if echo "$line" | grep -qE "$non_sensitive_pattern"; then
            echo "‚ö†Ô∏è Skipping non-sensitive hash in '$file'."
            return 0
          fi
        done
        echo "‚ùå Found secret pattern in '$file': $line"
        return 1
      fi
    done
  done < "$file"
  return 0
}

# Function to scan for secrets in each staged file
scan_files_for_secrets() {
  local secret_found=false
  for file in $staged_files; do
    # Skip non-text files (e.g., binary files)
    if file "$file" | grep -qE 'text'; then
      echo "üîç Scanning '$file' for secrets..."

      # Check secrets using our custom regex-based approach
      check_secrets_in_file "$file"
      if [ $? -ne 0 ]; then
        secret_found=true
      fi
    fi
  done

  # If secrets were found, abort the push
  if [ "$secret_found" = true ]; then
    echo "‚ùå Secrets detected in one or more files. Please remove sensitive data before pushing."
    exit 1
  fi
}

# Run the scan for secrets
scan_files_for_secrets

# If no secrets were found, continue with the push
echo "‚úÖ No secrets found in the staged files."
